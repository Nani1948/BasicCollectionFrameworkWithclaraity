package arraylistdemo;


import java.util.ArrayList;
import java.util.List;

public class ListOFArrayListDemo {
	//1.An ArrayList in Java is a resizable array implementation of the List interface.
		//2.Unlike arrays, which have a fixed size, an ArrayList can dynamically grow or shrink as elements are added or removed. 
		//When i am trying to add the element at the last index of the list  using set method, it is give java.lang.error .because
		/*
		 * Yes, you can add an element to the last index of an ArrayList,
		 *  but instead of using the set() method, you need to use the add() method.
	      The add() method appends the element to the end of the ArrayList. 
	      The set() method replaces an element at a specified index, which will throw an IndexOutOfBoundsException if the index doesn't already exist.*/
		//3.How to Add an Element to the Last Index:
	   //The add() method automatically appends the new element at the end of the list, 
	   //so you donâ€™t need to manage the index manually.
		public static void main(String[] args) {
		List<String>list=new ArrayList<>();
		list.add("apple");
		list.add("banana");
		list.add("cherry");
		System.out.println(list);
	// To access the element use get()
		System.out.println(list.get(2));
		//To modify the element using set using index,value
		//list.set(3,"orange"); modify using add method
		list .add(3,"orange");
		System.out.println(list);
		//Removing the element
		System.out.println("Remove element from the list:"+list.remove(2));
		System.out.println("Print  the list:"+list);
		//Iterating Through Elements

//You can iterate through an ArrayList using a loop.
		for(String fruit:list) {
			System.out.println("List of element in the fruit:"+fruit);
		}
		//How to did you handle the dynamic data.
		
		int listOfFruits=list.size();
		for(int i=0;i<listOfFruits;i++) {
			System.out.println("List of element using for loop:"+list.get(i));
		}
	//How to clear all the element in the list
		/*The list.clear() method in Java is used to remove all the elements from an ArrayList. 
		 * However, it does not return a value; it just performs the action of clearing the list. 
		 * Therefore, trying to print list.clear() will result in an error or unexpected output, as clear() has a return type of void.
		 * If you want to clear the list and then print the result, 
		 * you can first call clear() and then print the list to show that it is empty.*/
		list.clear();
		System.out.println("Clear the element in the list:"+list);
		//If you need to check whether the list has been cleared, you can also use list.isEmpty():
         System.out.println("Is the list empty? " + list.isEmpty());
		
		}		
		
}
